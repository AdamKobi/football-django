from django.db import models
from rest_framework.reverse import reverse as api_reverse
from django_pandas.managers import DataFrameManager
from profiles.models import Player

class RawData(models.Model):
    date = models.DateTimeField(db_index=True, db_column='date')  
    session = models.TextField(db_column='session')  
    drill = models.TextField(db_column='drill')  
    position = models.TextField(db_column='position')  
    start_time = models.TextField(db_column='start_time')
    duration = models.FloatField(db_column='duration')  
    day_code = models.TextField(db_column='day_code')
    custom_subjective_field = models.BigIntegerField(db_column='custom_subjective_field')
    rpe = models.BigIntegerField(db_column='rpe')  
    distance = models.FloatField(db_column='distance')  
    distance_z1 = models.FloatField(db_column='distance_z1')
    distance_z2 = models.FloatField(db_column='distance_z2')
    distance_z3 = models.FloatField(db_column='distance_z3')
    distance_z4 = models.FloatField(db_column='distance_z4')
    distance_z5 = models.FloatField(db_column='distance_z5')
    distance_z6 = models.FloatField(db_column='distance_z6')
    speed_max = models.FloatField(db_column='speed_max')
    speed_avg = models.FloatField(db_column='speed_avg')
    hr_max_field = models.BigIntegerField(db_column='hr_max')
    hr_avg = models.FloatField(db_column='hr_avg')
    hr_exertion = models.FloatField(db_column='hr_exertion')
    hr_time_z1 = models.FloatField(db_column='hr_time_z1')
    hr_time_z2 = models.FloatField(db_column='hr_time_z2')
    hr_time_z3 = models.FloatField(db_column='hr_time_z3')
    hr_time_z4 = models.FloatField(db_column='hr_time_z4')
    hr_time_z5 = models.FloatField(db_column='hr_time_z5')
    hr_time_z6 = models.FloatField(db_column='hr_time_z6')
    speed_exertion = models.FloatField(db_column='speed_exertion')
    sprint_count_from_spi_iq = models.BigIntegerField(db_column='sprint_count_from_spi_iq')
    accel_z1 = models.BigIntegerField(db_column='accel_z1')
    accel_z2 = models.BigIntegerField(db_column='accel_z2')
    accel_z3 = models.BigIntegerField(db_column='accel_z3')
    decel_z1 = models.BigIntegerField(db_column='decel_z1')
    decel_z2 = models.BigIntegerField(db_column='decel_z2')
    decel_z3 = models.BigIntegerField(db_column='decel_z3')
    body_load = models.FloatField(db_column='body_load')
    impacts_z1 = models.BigIntegerField(db_column='impacts_z1')
    impacts_z2 = models.BigIntegerField(db_column='impacts_z2')
    impacts_z3 = models.BigIntegerField(db_column='impacts_z3')
    impacts_z4 = models.BigIntegerField(db_column='impacts_z4')
    impacts_z5 = models.BigIntegerField(db_column='impacts_z5')
    impacts_z6 = models.BigIntegerField(db_column='impacts_z6')
    collisions = models.BigIntegerField(db_column='collisions')  
    running_series_count = models.BigIntegerField(db_column='running_series_count')
    running_imbalance = models.FloatField(db_column='running_imbalance')
    foot_strikes = models.BigIntegerField(db_column='foot_strikes')
    met_load_time_z1 = models.FloatField(db_column='met_load_time_z1')
    met_load_time_z2 = models.FloatField(db_column='met_load_time_z2')
    met_load_time_z3 = models.FloatField(db_column='met_load_time_z3')
    met_load_time_z4 = models.FloatField(db_column='met_load_time_z4')
    met_load_time_z5 = models.FloatField(db_column='met_load_time_z5')
    met_load_relative_kj_kg = models.FloatField(db_column='met_load_relative_kj/kg')
    met_load_relative_power_w_kg = models.FloatField(db_column='met_load_relative_power_w/kg')
    met_load_hml_distance_z3_5 = models.FloatField(db_column='met_load_hml_distance_z3_5')
    met_load_equivalent_distance = models.FloatField(db_column='met_load_equivalent_distance')
    met_load_distance_z1 = models.FloatField(db_column='met_load_distance_z1')
    met_load_distance_z2 = models.FloatField(db_column='met_load_distance_z2')
    met_load_distance_z3 = models.FloatField(db_column='met_load_distance_z3')
    met_load_distance_z4 = models.FloatField(db_column='met_load_distance_z4')
    met_load_distance_z5 = models.FloatField(db_column='met_load_distance_z5')
    met_load_absolute_kj = models.FloatField(db_column='met_load_absolute_kj')
    sprint_duration = models.FloatField(db_column='sprint_duration')
    sprint_distance_min = models.BigIntegerField(db_column='sprint_distance/min')
    sprint_distance = models.BigIntegerField(db_column='sprint_distance')
    work_rate_interval_count = models.BigIntegerField(db_column='work_rate_interval_count')
    work_rate_duration_sec = models.FloatField(db_column='work_rate_duration_sec')
    work_rate_interval_distance = models.FloatField(db_column='work_rate_interval_distance')
    accel_load_total = models.FloatField(db_column='accel_load_total')
    accel_load_density = models.FloatField(db_column='accel_load_density')
    accel_load_density_index = models.FloatField(db_column='accel_load_density_index')
    athlete = models.ForeignKey('profiles.Player', on_delete=models.CASCADE)  

    # objects = DataFrameManager()

    class Meta:
        unique_together = ('date', 'athlete', 'start_time')
        db_table = 'gps_data_raw_data'
        verbose_name = 'GPS'
        verbose_name_plural = 'GPS'
        ordering = ['-date']
    
    def get_api_url(self, request=None):
        return api_reverse("api-gps:rud", kwargs={'pk': self.pk}, request=request)
